---
name: Basic Docker Build
# simplest workflow possible

on:
    push:
        branches:
            - master
    pull_request:

jobs:
    # FIRST JOB #######################################################################
    build-test-image:
        name: Build Image for Testing
        runs-on: ubuntu-latest

        permissions:
            packages: write # needed to push docker image to ghcr.io

        steps:
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Login to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Login to ghcr.io registry
              uses: docker/login-action@v3
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Build and Push to GHCR
              uses: docker/build-push-action@v6
              with:
                  push: true
                  tags: ghcr.io/${{ github.actor }}/portfolio-image:${{ github.run_id }}
                  target: test
                  cache-from: type=gha
                  cache-to: type=gha,mode=max
                  platforms: linux/amd64

    # NEXT JOB #######################################################################
    test-unit:
        name: Unit tests in Docker
        needs: [build-test-image]
        runs-on: ubuntu-latest

        permissions:
            packages: read

        steps:
            - name: Login to ghcr.io registry
              uses: docker/login-action@v3
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Unit Testing in Docker
              run: docker run --rm ghcr.io/${{ github.actor }}/portfolio-image:"$GITHUB_RUN_ID" npm run validate

    # NEXT JOB #######################################################################
    scan-image:
        name: Scan Image with Trivy
        needs: [build-test-image]
        runs-on: ubuntu-latest

        permissions:
            contents: read # for actions/checkout to fetch code
            packages: read # needed to pull docker image to ghcr.io
            security-events: write # for github/codeql-action/upload-sarif to upload SARIF results

        steps:
            - name: Checkout git repo
              uses: actions/checkout@v4

            - name: Login to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Login to ghcr.io registry
              uses: docker/login-action@v3
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Pull image to scan
              run: docker pull ghcr.io/${{ github.actor }}/portfolio-image:"$GITHUB_RUN_ID"

            - name: Run Trivy for all CVEs (non-blocking)
              uses: aquasecurity/trivy-action@master
              with:
                  image-ref: ghcr.io/${{ github.actor }}/portfolio-image:${{ github.run_id }}
                  format: table
                  exit-code: 0

    # NEXT JOB #######################################################################
    build-final-image:
        name: Build Final Image
        needs: [test-unit, scan-image]
        runs-on: ubuntu-latest

        permissions:
            packages: write # needed to push docker image to ghcr.io
            pull-requests: write # needed to create and update comments in PRs

        steps:
            - name: Set up QEMU
              uses: docker/setup-qemu-action@v3

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Login to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Login to ghcr.io registry
              uses: docker/login-action@v3
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Cache node modules
              uses: actions/cache@v3
              with:
                  path: ~/.npm
                  key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                      ${{ runner.os }}-npm-

            - name: Docker Metadata for Final Image Build
              id: docker_meta
              uses: docker/metadata-action@v5
              with:
                  images: smyrninio/portfolio-image,ghcr.io/${{ github.actor }}/portfolio-image
                  flavor: |
                      latest=false
                  tags: |
                      type=raw,value= ${{ github.run_id }}
                      type=raw,value=latest,enable=${{ endsWith(github.ref, github.event.repository.default_branch) }}
                      type=ref,event=pr
                      type=ref,event=branch
                      type=semver,pattern={{version}}

            - name: Docker Build and Push to GHCR and Docker Hub
              uses: docker/build-push-action@v6
              with:
                  push: true
                  tags: ${{ steps.docker_meta.outputs.tags }}
                  labels: ${{ steps.docker_meta.outputs.labels }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max
                  platforms: linux/amd64
                  build-args: |
                      NODE_ENV=production # Set NODE_ENV for faster installs

            # If PR, put image tags in the PR comments
            # from https://github.com/marketplace/actions/create-or-update-comment
            - name: Find comment for image tags
              uses: peter-evans/find-comment@v3
              if: github.event_name == 'pull_request'
              id: fc
              with:
                  issue-number: ${{ github.event.pull_request.number }}
                  comment-author: 'github-actions[bot]'
                  body-includes: Docker image tag(s) pushed

            # If PR, upadate image tags in the PR comments
            - name: Create or update comment for image tags
              uses: peter-evans/create-or-update-comment@v4
              if: github.event_name == 'pull_request'
              with:
                  comment-id: ${{ steps.fc.outputs.comment-id }}
                  issue-number: ${{ github.event.pull_request.number }}
                  body: |
                      Docker image tag(s) pushed:
                      ```text
                      ${{ steps.docker_meta.outputs.tags }}
                      ```

                      Labels added to images:
                      ```text
                      ${{ steps.docker_meta.outputs.labels }}
                      ```
                  edit-mode: replace
